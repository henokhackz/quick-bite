// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model StudentServicesMembership {
  id          String   @id @default(cuid()) @map("_id")
  studentId   String
  isMember    String
  position    String
  description String
  student     Student  @relation(fields: [studentId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String    @unique
  username       String    @unique
  emailVerified  DateTime?
  image          String?
  role           Role      @default(student)
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
   status      String   @default("offline") 
  lastSeen    DateTime @default(now())

 


  // Relations
  sessions       Session[]
  accounts       Account[]
  attendance     Attendance[]
  Authenticator  Authenticator[]
  studentId      String?
  ticketHolder   TicketHolder[]
  studentService StudentService[]
  Student        Student[]
   sentMessages    Message[] 
  chatRooms   ChatRoomUser[]
  notifications Notification[]
  
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refreshToken      String?
  accessToken       String?
  expiresAt         Int?
  tokenType         String?
  scope             String?
  idToken           String?
  sessionState      String?
  oauthTokenSecret  String?
  oauthToken        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

model Photo {
  id        String @id @default(cuid()) @map("_id")
  photoUrl  String
  photoId   String @unique
  studentId String

  student        Student       @relation(fields: [studentId], references: [id], onDelete: Cascade)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  ticketHolderId String?
}

model TicketHolderPhoto {
  id             String @id @default(cuid()) @map("_id")
  photoUrl       String
  photoId        String @unique
  ticketHolderId String

  ticketHolder TicketHolder @relation(fields: [ticketHolderId], references: [id], onDelete: Cascade)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}
model StudentServicePhoto {
  id             String @id @default(cuid()) @map("_id")
  photoUrl       String
  photoId        String @unique
  studentServiceId String

  studentService StudentService @relation(fields: [studentServiceId], references: [id], onDelete: Cascade)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Student {
  id                        String                      @id @default(cuid()) @map("_id")
  userId                    String?                     @db.ObjectId
  username                  String                      @unique
  firstName                 String
  lastName                  String
  email                     String                      @unique
  photos                    Photo[]
  qrCode                    String?
  isBlackListed             Boolean?
  scholarishipStatus        String?
  healthStatus              String?
  department                String
  batch                     String
  assignedCafeteria         String
  attendance                Attendance[]
  studentServicesMembership StudentServicesMembership[]
  phoneNumber               String?
  role                      Role  @default(student)
  dateOfBirth               DateTime
  gender                    Gender
  address                   String?
  user                      User?                       @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime                    @updatedAt
}

model TicketHolder {
  id                String              @id @default(cuid()) @map("_id")
  userId            String?             @db.ObjectId
  username          String              @unique
  firstName         String
  lastName          String
  email             String              @unique
  assignedCafeteria String
  phoneNumber       String?
  role              Role
  dateOfBirth       DateTime
  gender            Gender
  address           String?
  user              User?               @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  ticketHolderPhoto TicketHolderPhoto[]
}
model StudentService {
  id                String              @id @default(cuid()) @map("_id")
  userId            String?             @db.ObjectId
  username          String              @unique
  firstName         String
  lastName          String
  email             String              @unique
  assignedCafeteria String
  phoneNumber       String?
  role              Role
  dateOfBirth       DateTime?
  gender            Gender
  address           String?
  user              User?               @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  studentServicePhoto StudentServicePhoto[]
}



model Attendance {
  id             String   @id @default(cuid()) @map("_id")
  studentId      String
  studentName    String
  studentPicture String
  cafeteria      String
  mealType       String
  timestamp      DateTime @default(now())
  attended       Boolean
  mealCost       String
  student        Student  @relation(fields: [studentId], references: [id])
  checkInMethod  Method
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  User           User?    @relation(fields: [userId], references: [id])
  userId         String?  @db.ObjectId
}

model ChatRoom {
  id        String   @id @default(cuid()) @map("_id")
  name      String?  // Only for group chats
  type      ChatType // PERSONAL | GROUP
  isPrivate Boolean  @default(false) 

  messages   Message[]
  users      ChatRoomUser[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model ChatRoomUser {
  id        String   @id @default(cuid()) @map("_id")
  chatRoomId String
  role      UserRole 

  userId    String?  @db.ObjectId
  user      User?     @relation(fields: [userId], references: [id])
  chatRoom  ChatRoom @relation(fields: [chatRoomId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id        String   @id @default(cuid()) @map("_id")
  text        String
  senderId    String?   @db.ObjectId
  chatRoomId  String
  isRead      Boolean  @default(false)
  sender      User?     @relation(fields: [senderId], references: [id])
  chatRoom    ChatRoom @relation(fields: [chatRoomId], references: [id])

  createdAt   DateTime @default(now())
  updatedAt DateTime  @updatedAt

}

model Notification {
 id        String   @id @default(cuid()) @map("_id")
  userId    String   @db.ObjectId
  type      String   
  isRead    Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


enum Method {
  fr
  qrCode
}

enum Gender {
  male
  female
}

enum Role {
  student
  studentService
  ticketHolder
  admin
}

enum ChatType {
  PERSONAL
  GROUP
}

enum UserRole {
  ADMIN
  MEMBER
}